@page
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Lista de pedidos</title>
    <link rel="stylesheet" href="~/CSS/StyleMesero.css">
    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
</head>
<body>
    <div class="contenedor">
        <div class="header">
            <img src="~/Assets/MenuRestaurante.png" class="menuicono" id="menuToggle" />
        </div>
        <nav class="menu" id="menuOpciones">
            <a href="/CrearPedido">Crear Pedido</a>
            <a href="/Pedidos">Lista de Pedidos</a>
            <a href="#" id="logoutBtn">Cerrar sesión</a>
        </nav>
        <h2>Pedidos Activos</h2>

        <!-- Indicador de conexión SignalR -->
        <div id="connectionStatus" style="padding: 5px 10px; margin-bottom: 10px; border-radius: 3px; font-size: 0.9em;">
            <span id="statusText">Conectando...</span>
        </div>

        <div id="loadingPedidos" style="display: none; text-align: center; padding: 20px;">
            Cargando pedidos...
        </div>
        <div id="errorPedidos" style="display: none; text-align: center; padding: 20px; color: red;">
        </div>
        <div class="pedidos-lista" id="pedidosContainer">
        </div>
    </div>
</body>
</html>
<script>
    let signalRConnection = null;
    let userRole = null;

    document.addEventListener('DOMContentLoaded', function () {
        const token = localStorage.getItem('accessToken');
        if (!token) {
            window.location.href = '/Login';
            return;
        }
        getUserInfo().then(() => {
            initSignalR();
            cargarPedidos();
        });

        const toggleBtn = document.getElementById('menuToggle');
        const menu = document.getElementById('menuOpciones');
        const logoutBtn = document.getElementById('logoutBtn');
        const pedidosContainer = document.getElementById('pedidosContainer');
        const loadingPedidos = document.getElementById('loadingPedidos');
        const errorPedidos = document.getElementById('errorPedidos');
        const connectionStatus = document.getElementById('connectionStatus');
        const statusText = document.getElementById('statusText');

        toggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        });

        document.addEventListener('click', (e) => {
            if (!menu.contains(e.target) && e.target !== toggleBtn) {
                menu.style.display = 'none';
            }
        });

        logoutBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            await logout();
        });

        async function getUserInfo() {
            try {
              
                const token = localStorage.getItem('accessToken');
                if (token) {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    userRole = payload.role || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || 'Mesero';
                    console.log('Rol del usuario:', userRole);
                    return;
                }
            } catch (error) {
                console.error('Error decodificando token:', error);
            }

            try {
              
                const response = await fetch('https://restaurant-api.websitos256.com/api/auth/me', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const userInfo = await response.json();
                    userRole = userInfo.role || userInfo.tipo || 'Mesero';
                    console.log('Información del usuario:', userInfo);
                } else {
                   
                    userRole = 'Mesero';
                    console.log('No se pudo obtener info del usuario, usando rol por defecto:', userRole);
                }
            } catch (error) {
                console.error('Error obteniendo información del usuario:', error);
                userRole = 'Mesero'; 
            }
        }


        function initSignalR() {
            try {
                const token = localStorage.getItem('accessToken');
                signalRConnection = new signalR.HubConnectionBuilder()
                    .withUrl("https://restaurant-api.websitos256.com/restaurantHub", {
                        accessTokenFactory: () => {
                            const currentToken = localStorage.getItem("accessToken");
                            console.log('Token para SignalR:', currentToken ? 'Token presente' : 'No token');
                            return currentToken;
                        },
                        skipNegotiation: true,
                        transport: signalR.HttpTransportType.WebSockets
                    })
                    .withAutomaticReconnect([0, 2000, 10000, 30000])
                    .configureLogging(signalR.LogLevel.Information)
                    .build();
                signalRConnection.onclose(async (error) => {
                    updateConnectionStatus('Desconectado', 'red');
                    console.log('SignalR desconectado:', error);
                });

                signalRConnection.onreconnecting((error) => {
                    updateConnectionStatus('Reconectando...', 'orange');
                    console.log('SignalR reconectando...', error);
                });

                signalRConnection.onreconnected((connectionId) => {
                    updateConnectionStatus('Conectado', 'green');
                    console.log('SignalR reconectado:', connectionId);
                });

                setupSignalRListeners();
                startSignalRConnection();

            } catch (error) {
                console.error('Error al inicializar SignalR:', error);
                updateConnectionStatus('Error de conexión', 'red');
            }
        }

        function setupSignalRListeners() {
          
            signalRConnection.on("TicketCreated", function (notification) {
                console.log("Nuevo ticket creado:", notification);
                showNotification("Nuevo pedido creado", "success");
                cargarPedidos(); 
            });

       
            signalRConnection.on("TicketClosed", function (notification) {
                console.log("Ticket cerrado:", notification);
                showNotification("Pedido cerrado", "info");
                cargarPedidos(); 
            });

            
            signalRConnection.on("RefreshTicketsList", function (data) {
                console.log("Actualizar lista de tickets:", data);
                cargarPedidos(); 
            });

           
            signalRConnection.on("ItemStateChanged", function (notification) {
                console.log("Estado de item cambiado:", notification);

              
                if (notification.NewState && notification.NewState.toLowerCase() === "listo") {
                    let mensaje = `Producto de la mesa ${notification.mesaNumero} listo para servir`;
                    showNotification(mensaje, "success");
                    cargarPedidos(); 
                }
            });
            signalRConnection.on("ItemCompleted", function (notification) {
                console.log("Item completado:", notification);
                let mensaje = `Producto de la mesa ${notification.mesaNumero} listo para servir`;
                showNotification(mensaje, "success");
                cargarPedidos(); 
            });
            signalRConnection.on("MesaOccupied", function (notification) {
                console.log("Mesa ocupada:", notification);
                
            });

           
            signalRConnection.on("MesaAvailabilityChanged", function (notification) {
                console.log("Disponibilidad de mesa cambiada:", notification);
              
                if (notification.Disponible && (userRole === "Mesero" || userRole === "mesero")) {
                    showNotification(`Mesa ${notification.MesaNumero} disponible`, "info");
                }
            });

           
            signalRConnection.on("ItemCompleted", function (notification) {
                console.log("Item completado:", notification);
                
            });

            
            signalRConnection.on("ReceiveMessage", function (user, message) {
                console.log(`Mensaje de ${user}: ${message}`);
                showNotification(`${user}: ${message}`, "info");
            });
        }

        async function startSignalRConnection() {
            try {
                updateConnectionStatus('Conectando...', 'orange');

                const token = localStorage.getItem('accessToken');
                if (!token) {
                    throw new Error('No hay token de acceso');
                }

                console.log('Iniciando conexión SignalR...');
                await signalRConnection.start();
                updateConnectionStatus('Conectado', 'green');
                console.log("Conectado a SignalR Hub");

                console.log("Conexión establecida, recibiendo notificaciones globales");

            } catch (err) {
                console.error("Error conectando a SignalR: " + err.toString());
                updateConnectionStatus('Error de conexión', 'red');

                if (err.toString().includes('401') || err.toString().includes('Unauthorized')) {
                    console.log('Error de autorización, redirigiendo al login...');
                    localStorage.removeItem('accessToken');
                    localStorage.removeItem('loginTime');
                    window.location.href = '/Login';
                    return;
                }

                setTimeout(() => {
                    if (signalRConnection.state === signalR.HubConnectionState.Disconnected) {
                        startSignalRConnection();
                    }
                }, 5000);
            }
        }

        function updateConnectionStatus(status, color) {
            statusText.textContent = status;
            connectionStatus.style.backgroundColor = color === 'green' ? '#d4edda' :
                color === 'orange' ? '#fff3cd' : '#f8d7da';
            connectionStatus.style.color = color === 'green' ? '#155724' :
                color === 'orange' ? '#856404' : '#721c24';
            connectionStatus.style.border = `1px solid ${color === 'green' ? '#c3e6cb' :
                color === 'orange' ? '#ffeaa7' : '#f5c6cb'}`;
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                                        position: fixed;
                                        top: 20px;
                                        right: 20px;
                                        padding: 12px 18px;
                                        border-radius: 8px;
                                        color: white;
                                        font-weight: 500;
                                        font-size: 14px;
                                        z-index: 1000;
                                        opacity: 0;
                                        transform: translateX(100%);
                                        transition: all 0.3s ease;
                                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                                        max-width: 300px;
                                        word-wrap: break-word;
                                        cursor: pointer;
                                    `;

            switch (type) {
                case 'success':
                    notification.style.backgroundColor = '#28a745';
                    break;
                case 'info':
                    notification.style.backgroundColor = '#17a2b8';
                    break;
                case 'warning':
                    notification.style.backgroundColor = '#ffc107';
                    notification.style.color = '#212529';
                    break;
                case 'error':
                    notification.style.backgroundColor = '#dc3545';
                    break;
                default:
                    notification.style.backgroundColor = '#6c757d';
            }

            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 4000);

            notification.addEventListener('click', () => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            });
        }

        function normalizarRespuesta(data) {
            if (Array.isArray(data)) {
                return data;
            }

            if (data && typeof data === 'object') {
                if (data.tickets && Array.isArray(data.tickets)) {
                    return data.tickets;
                }
                if (data.data && Array.isArray(data.data)) {
                    return data.data;
                }
                if (data.results && Array.isArray(data.results)) {
                    return data.results;
                }
                return [data];
            }

            return [];
        }

        async function cargarPedidos() {
            try {
                loadingPedidos.style.display = 'block';
                errorPedidos.style.display = 'none';
                pedidosContainer.innerHTML = '';

                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000);

                const response = await fetch('https://restaurant-api.websitos256.com/api/ticket/abierto', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Cache-Control': 'no-cache'
                    },
                    signal: controller.signal
                });

                clearTimeout(timeoutId);

                if (response.ok) {
                    const contentType = response.headers.get('content-type');
                    let data;

                    if (contentType && contentType.includes('application/json')) {
                        data = await response.json();
                    } else {
                        throw new Error('La respuesta no es JSON válido');
                    }

                    console.log('Respuesta original:', data);
                    const tickets = normalizarRespuesta(data);
                    console.log('Tickets normalizados:', tickets);
                    mostrarPedidos(tickets);
                } else if (response.status === 401) {
                    localStorage.removeItem('accessToken');
                    localStorage.removeItem('loginTime');
                    window.location.href = '/Login';
                } else {
                    const errorText = await response.text();
                    throw new Error(`Error ${response.status}: ${errorText || response.statusText}`);
                }
            } catch (error) {
                console.error('Error al cargar pedidos:', error);

                if (error.name === 'AbortError') {
                    mostrarError('La petición tardó demasiado tiempo. Intente nuevamente.');
                } else if (error.message.includes('CORS')) {
                    mostrarError('Error de conexión. Verifique su conexión a internet.');
                } else {
                    mostrarError(`Error al cargar los pedidos: ${error.message}`);
                }
            } finally {
                loadingPedidos.style.display = 'none';
            }
        }

        function mostrarPedidos(tickets) {
            if (!tickets || tickets.length === 0) {
                pedidosContainer.innerHTML = '<p style="text-align: center; padding: 20px;">No hay pedidos activos</p>';
                return;
            }

            const pedidosHTML = tickets.map(ticket => {
                if (!ticket || typeof ticket !== 'object') {
                    console.warn('Ticket inválido:', ticket);
                    return '';
                }

                const numeroMesa = ticket.mesa?.numero || 'Sin mesa';
                const nombreMesero = ticket.mesero?.nombreCompleto || 'Sin mesero';
                const total = ticket.total ? `$${ticket.total.toFixed(2)}` : '$0.00';
                const fecha = ticket.createdAt ? new Date(ticket.createdAt).toLocaleString() : 'Sin fecha';
                const cantidadItems = ticket.ticketItems?.length || 0;
                const estado = ticket.estado || 'Sin estado';
                const ticketId = ticket.id || 0;

                return `
                                            <div class="pedido">
                                                <p><strong>Mesa ${numeroMesa}</strong></p>
                                                <p>Mesero: ${nombreMesero}</p>
                                                <p>Total: ${total}</p>
                                                <p>Estado: ${estado}</p>
                                                <p>Items: ${cantidadItems}</p>
                                                <p>Fecha: ${fecha}</p>
                                                <div class="boton-grupo">
                                                    <button class="boton-secundario2" onclick="verPedido(${ticketId})">Ver</button>
                                                </div>
                                            </div>
                                        `;
            }).filter(html => html !== '').join('');

            pedidosContainer.innerHTML = pedidosHTML || '<p style="text-align: center; padding: 20px;">No se pudieron cargar los pedidos</p>';
        }

        function mostrarError(mensaje) {
            errorPedidos.textContent = mensaje;
            errorPedidos.style.display = 'block';
        }

        window.verPedido = function (ticketId) {
            if (!ticketId || ticketId === 0) {
                alert('ID de ticket inválido');
                return;
            }

            localStorage.setItem('selectedTicketId', ticketId);
            window.location.href = '/VerPedido';
        };

        async function logout() {
            try {
                if (signalRConnection) {
                    await signalRConnection.stop();
                    console.log('SignalR desconectado por logout');
                }

                const response = await fetch('https://restaurant-api.websitos256.com/api/auth/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
                        'Content-Type': 'application/json'
                    }
                });

                localStorage.removeItem('accessToken');
                localStorage.removeItem('loginTime');
                localStorage.removeItem('selectedTicketId');

                window.location.href = '/Login';
            } catch (error) {
                console.error('Error en logout:', error);
                localStorage.removeItem('accessToken');
                localStorage.removeItem('loginTime');
                localStorage.removeItem('selectedTicketId');
                window.location.href = '/Login';
            }
        }

        window.recargarPedidos = function () {
            cargarPedidos();
        };

        window.addEventListener('beforeunload', function () {
            if (signalRConnection) {
                signalRConnection.stop();
            }
        });
    });
</script>